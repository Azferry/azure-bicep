{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.63.48766",
      "templateHash": "17915395177176931375"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "allowedValues": [
        "eastus",
        "westus2",
        "southcentralus"
      ],
      "metadata": {
        "description": "The location into which regionally scoped resources should be deployed."
      }
    },
    "appName": {
      "type": "string",
      "defaultValue": "[format('fn-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Azure Functins application to create. This must be globally unique."
      }
    },
    "functionAppServicePlanSkuName": {
      "type": "string",
      "defaultValue": "EP1",
      "metadata": {
        "description": "The SKU name to use for Azure Functions. This must be a SKU that is compatible with private endpoints, i.e. EP1 or better."
      }
    }
  },
  "functions": [],
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "function",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appName": {
            "value": "[parameters('appName')]"
          },
          "functionPlanSkuName": {
            "value": "[parameters('functionAppServicePlanSkuName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "4187261123213857542"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location into which the Azure Functions resources should be deployed."
              }
            },
            "appName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Functions application to create. This must be globally unique."
              }
            },
            "functionRuntime": {
              "type": "string",
              "defaultValue": "dotnet",
              "metadata": {
                "description": "The application runtime that the function app uses."
              }
            },
            "functionPlanSkuName": {
              "type": "string",
              "metadata": {
                "description": "The name of the SKU to use when creating the Azure Functions plan. Common SKUs include Y1 (consumption) and EP1, EP2, and EP3 (premium)."
              }
            }
          },
          "functions": [],
          "variables": {
            "appServicePlanName": "FunctionPlan",
            "appInsightsName": "AppInsights",
            "storageAccountName": "fnstor234523245",
            "functionPlanKind": "[if(equals(parameters('functionPlanSkuName'), 'Y1'), 'functionapp', 'elastic')]",
            "functionName": "MyHttpTriggeredFunction"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2018-05-01-preview",
              "name": "[variables('appInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[variables('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "[variables('functionPlanKind')]",
              "sku": {
                "name": "[parameters('functionPlanSkuName')]"
              },
              "properties": {}
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[parameters('appName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey)]"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "[parameters('functionRuntime')]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~3"
                    },
                    {
                      "name": "AzureWebJobsDisableHomepage",
                      "value": "true"
                    }
                  ]
                },
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/functions",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('appName'), variables('functionName'))]",
              "properties": {
                "config": {
                  "disabled": false,
                  "bindings": [
                    {
                      "name": "req",
                      "type": "httpTrigger",
                      "direction": "in",
                      "authLevel": "anonymous",
                      "methods": [
                        "get"
                      ]
                    },
                    {
                      "name": "$return",
                      "type": "http",
                      "direction": "out"
                    }
                  ]
                },
                "files": {
                  "run.csx": "        #r \"Newtonsoft.Json\"\r\n        using System.Net;\r\n        using Microsoft.AspNetCore.Mvc;\r\n        using Microsoft.Extensions.Primitives;\r\n        using Newtonsoft.Json;\r\n        \r\n        public static async Task<IActionResult> Run(HttpRequest req, ILogger log)\r\n        {\r\n            log.LogInformation(\"C# HTTP trigger function processed a request.\");\r\n            string name = req.Query[\"name\"];\r\n            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\r\n            dynamic data = JsonConvert.DeserializeObject(requestBody);\r\n            name = name ?? data?.name;\r\n            \r\n            string responseMessage = string.IsNullOrEmpty(name)\r\n                ? \"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\"\r\n                : $\"Hello, {name}. This HTTP triggered function executed successfully.\";\r\n            \r\n            return new OkObjectResult(responseMessage);\r\n        }\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appName'))).defaultHostName]"
            },
            "functionName": {
              "type": "string",
              "value": "[variables('functionName')]"
            },
            "functionAppResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
            }
          }
        }
      }
    }
  ]
}